using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Petrol_Pump_Point_Of_Sale_System.Classes.Helpers;
using Petrol_Pump_Point_Of_Sale_System.Components;
using Petrol_Pump_Point_Of_Sale_System.Persistence.Repositories;
using Petrol_Pump_Point_Of_Sale_System.Models;
using System;
using Petrol_Pump_Point_Of_Sale_System.Commons.Enums;
using Petrol_Pump_Point_Of_Sale_System.Commons.Helper;
using Petrol_Pump_Point_Of_Sale_System.Dialogs;

namespace Petrol_Pump_Point_Of_Sale_System.View.Product
{
    public partial class ProductView
    {

        private void Initialize()
        {
            InitializeEvent();
            InitializeButtonTabEvent();
            
        }
        private void InitializeButtonTabEvent()
        {
            SetProductButtonTabEvent();
        }

        private void GetSelectedProduct()
        {
            using (var db = new DbRepository(new DatabaseContext()))
            {
                var productId = int.Parse(ControlHelper
                                        .GetDataGridViewKey(dgvProduct, "Id"));

                var selectedProduct = db.Products.Find(productId);
                //.GetById(productId);
                if (selectedProduct != null)
                    FillProductInformation(selectedProduct);
            }
        }

        private void FillProductInformation(Models.Product selectedProduct)
        {
            txtProductCode.Text = selectedProduct.ProductCode;
            txtProductName.Text = selectedProduct.ProductName;
            txtUnit.Text = selectedProduct.ProductName;
            txtPurchaseRate.Text = Convert.ToString(selectedProduct.PurchaseRate);
            txtSalesRate.Text = Convert.ToString(selectedProduct.SalesRate);
            txtQuantity.Text = Convert.ToString(selectedProduct.Quantity);
            GotoProductDetailsTab();
        }

        private void GotoProductDetailsTab()
        {
            tcProductMenu.SelectTab(tpProductDetails);
        }

        private void ShowErrorMessage()
        {
           MessageAlert.Show(MessageHelper.NoSelectedRecord(),"Error",AlertType.Error);
        }
        public void GetProducts()
        {
            using (var db = new DbRepository(new DatabaseContext()))
            {
                var products = db.Products.GetAll(searchCommand.GetSearchedValue, paginator.GetCurrentPage,paginator.GetRecordsPerPage);
                dgvProduct.DataSource = products;
            }
        }

        private void InitializeEvent()
        {
            paginator.PageNavigationButtonClicked += (s, e) =>
            {
                GetProducts();
            };
            paginator.RefreshButtonClicked += (s, e) =>
            {
                GetProducts();
            };

            paginator.RecordCountChanged += (s, e) =>
            {
                
                SetTotalPage();
                GetProducts();
            };

            searchCommand.SearchButtonClicked += (s, e) =>
            {
                SetTotalPage();
                GetProducts();
            };

            searchCommand.FilterOnEnter += (s, e) =>
            {
                if (e.KeyCode == Keys.Enter)
                {
                    paginator.ResetPage();
                    SetTotalPage();
                    GetProducts();
                }
                    
            };

            searchCommand.UnFilterOnClearText += (s, e) =>
            {
                if (searchCommand.GetSearchedValue == "")
                {
                    paginator.ResetPage();
                    SetTotalPage();
                    GetProducts();
                }
                   
            };
            searchCommand.AddButtonClicked += (s, e) =>
            {

            };

            searchCommand.EditButtonClicked += (s, e) =>
            {
                GetSelectedProduct();
            };

            searchCommand.DeleteButtonClicked += (s, e) =>
            {
                DeleteProduct();
            };



        }

        private void DeleteProduct()
        {
            using (var db = new DbRepository(new DatabaseContext()))
            {
                var productId = int.Parse(ControlHelper
                    .GetDataGridViewKey(dgvProduct, "Id"));
                var selectedProduct = db.Products.GetById(productId);
                if (selectedProduct != null)
                    RemoveFromList(selectedProduct);
            }
        }

        private void RemoveFromList(Models.Product product)
        {
            using (var db = new DbRepository(new DatabaseContext()))
            {
                db.Products.Delete(product);
                db.Commit();
                GetProducts();
            }
        }

        private void SetTotalPage()
        {
            paginator.SetMaxPage(new DatabaseContext().Products.Count(p => p.IsActive));
        }
        private void SetProductButtonTabEvent()
        {
            var controls = tlpProductButtonTab.Controls.Cast<Control>().ToList();

            foreach (var control in controls)
            {
                if (control is FlatButton)
                {
                    var button = control as FlatButton;
                    button.Click += (s, e) =>
                    {
                        SelectButtonTab(button);
                        GetSelectedTab(button);

                    };
                }
            }
        }

        private void SelectButtonTab(FlatButton button)
        {
            SelectedButtonTheme(button);
            DeselectProductTabButton(button);
        }

        private void DeselectProductTabButton(FlatButton button)
        {
            foreach (var control in tlpProductButtonTab.Controls.Cast<Control>())
            {
                var currentButton = control as FlatButton;

                if (control is FlatButton && !currentButton.Equals(button))
                {
                    DeselectButtonTheme(currentButton);
                }
            }
        }

        private void SelectedButtonTheme(FlatButton button)
        {
            button.Margin = new Padding(1, 1, 1, 1);
            button.Dock = DockStyle.Fill;
            button.BackColorOnDefault = ColorHelper.FlatYellowNormal;
            button.BackColorOnHover = ColorHelper.FlatYellowNormal;
            button.BackColorOnClick = ColorHelper.FlatYellowNormal;
            button.ForeColorOnDefault = ColorHelper.White;
            button.ForeColorOnHover = ColorHelper.White;
            button.ForeColorOnClick = ColorHelper.White;
        }

        private void GetSelectedTab(FlatButton button)
        {
            var selectedButton = button.Text;
            tcProductMenu.SelectTab("tp" + button.Text.Replace(" ",""));
        }
        private void DeselectButtonTheme(FlatButton button)
        {
            button.Margin = new Padding(1, 1, 1, 1);
            button.Dock = DockStyle.Fill;
            button.BackColorOnDefault = Color.FromArgb(72, 72, 72);
            button.BackColorOnHover = Color.FromArgb(72, 72, 72);
            button.BackColorOnClick = Color.FromArgb(72, 72, 72);
            button.ForeColorOnDefault = ColorHelper.White;
            button.ForeColorOnHover = ColorHelper.White;
            button.ForeColorOnClick = ColorHelper.White;
        }

    }



}
